"""
Feature Engineering Pipeline
Transforms raw patient data into ML-ready features
"""

import pandas as pd
import numpy as np
from typing import Dict, List, Any, Optional, Tuple
import logging
from datetime import datetime, date
from sklearn.preprocessing import StandardScaler, MinMaxScaler, LabelEncoder, OneHotEncoder
from sklearn.impute import SimpleImputer, KNNImputer
from sklearn.feature_selection import SelectKBest, f_classif, chi2
import re

from config.config import FEATURE_CONFIG, DISEASE_CATEGORIES

logger = logging.getLogger(__name__)


class MedicalFeatureEngineer:
    """
    Comprehensive feature engineering for medical data
    Handles numerical, categorical, and text feature processing
    """
    
    def __init__(self):
        # Initialize scalers and encoders
        self.numerical_scaler = StandardScaler()
        self.categorical_encoders = {}
        self.imputers = {}
        self.feature_selectors = {}
        
        # Medical-specific feature mappings
        self.vital_signs_ranges = {
            'systolic_bp': {'low': 90, 'high': 180, 'critical_low': 70, 'critical_high': 200},
            'diastolic_bp': {'low': 60, 'high': 110, 'critical_low': 40, 'critical_high': 130},
            'heart_rate': {'low': 60, 'high': 100, 'critical_low': 40, 'critical_high': 150},
            'temperature': {'low': 97.0, 'high': 99.5, 'critical_low': 95.0, 'critical_high': 104.0},
            'respiratory_rate': {'low': 12, 'high': 20, 'critical_low': 8, 'critical_high': 30},
            'oxygen_saturation': {'low': 95, 'high': 100, 'critical_low': 90, 'critical_high': 100}
        }\n        \n        self.bmi_categories = {\n            'underweight': (0, 18.5),\n            'normal': (18.5, 25),\n            'overweight': (25, 30),\n            'obese_class_1': (30, 35),\n            'obese_class_2': (35, 40),\n            'obese_class_3': (40, 100)\n        }\n        \n        self.age_groups = {\n            'infant': (0, 2),\n            'child': (2, 12),\n            'adolescent': (12, 18),\n            'young_adult': (18, 35),\n            'middle_aged': (35, 65),\n            'elderly': (65, 120)\n        }\n        \n        # Lab test reference ranges (simplified)\n        self.lab_reference_ranges = {\n            'glucose': {'low': 70, 'high': 100, 'unit': 'mg/dL'},\n            'cholesterol_total': {'low': 0, 'high': 200, 'unit': 'mg/dL'},\n            'hdl_cholesterol': {'low': 40, 'high': 1000, 'unit': 'mg/dL'},\n            'ldl_cholesterol': {'low': 0, 'high': 100, 'unit': 'mg/dL'},\n            'triglycerides': {'low': 0, 'high': 150, 'unit': 'mg/dL'},\n            'hemoglobin': {'low': 12, 'high': 16, 'unit': 'g/dL'},\n            'white_blood_cell': {'low': 4000, 'high': 11000, 'unit': '/μL'},\n            'platelets': {'low': 150000, 'high': 400000, 'unit': '/μL'}\n        }\n    \n    def process_patient_data(self, patient_data: Dict[str, Any]) -> Dict[str, Any]:\n        \"\"\"Main method to process patient data into features\"\"\"\n        logger.info(\"Starting feature engineering process\")\n        \n        features = {}\n        \n        # Process demographic features\n        if 'demographics' in patient_data:\n            demo_features = self._process_demographic_features(patient_data['demographics'])\n            features.update(demo_features)\n        \n        # Process vital signs\n        if 'vital_signs' in patient_data:\n            vital_features = self._process_vital_signs(patient_data['vital_signs'])\n            features.update(vital_features)\n        \n        # Process medical history\n        if 'medical_history' in patient_data:\n            history_features = self._process_medical_history(patient_data['medical_history'])\n            features.update(history_features)\n        \n        # Process symptoms and complaints\n        if 'chief_complaint' in patient_data:\n            symptom_features = self._process_symptoms(patient_data['chief_complaint'])\n            features.update(symptom_features)\n        \n        # Process lab results\n        if 'lab_results' in patient_data:\n            lab_features = self._process_lab_results(patient_data['lab_results'])\n            features.update(lab_features)\n        \n        # Calculate derived features\n        derived_features = self._calculate_derived_features(features)\n        features.update(derived_features)\n        \n        # Calculate risk scores\n        risk_features = self._calculate_risk_scores(features, patient_data)\n        features.update(risk_features)\n        \n        logger.info(f\"Feature engineering completed. Generated {len(features)} features\")\n        return features\n    \n    def _process_demographic_features(self, demographics: Dict[str, Any]) -> Dict[str, Any]:\n        \"\"\"Process demographic information into features\"\"\"\n        features = {}\n        \n        # Age processing\n        if 'age' in demographics:\n            age = demographics['age']\n            features['age'] = age\n            features['age_squared'] = age ** 2\n            \n            # Age group encoding\n            for group, (min_age, max_age) in self.age_groups.items():\n                features[f'age_group_{group}'] = 1 if min_age <= age < max_age else 0\n        \n        # Gender encoding\n        if 'gender' in demographics:\n            gender = demographics['gender']\n            features['gender_male'] = 1 if gender == 'male' else 0\n            features['gender_female'] = 1 if gender == 'female' else 0\n            features['gender_other'] = 1 if gender in ['other', 'prefer_not_to_say'] else 0\n        \n        return features\n    \n    def _process_vital_signs(self, vital_signs: Dict[str, Any]) -> Dict[str, Any]:\n        \"\"\"Process vital signs into features\"\"\"\n        features = {}\n        \n        for vital, value in vital_signs.items():\n            if value is not None and vital in self.vital_signs_ranges:\n                features[vital] = value\n                \n                # Create range-based features\n                ranges = self.vital_signs_ranges[vital]\n                features[f'{vital}_normal'] = 1 if ranges['low'] <= value <= ranges['high'] else 0\n                features[f'{vital}_low'] = 1 if value < ranges['low'] else 0\n                features[f'{vital}_high'] = 1 if value > ranges['high'] else 0\n                features[f'{vital}_critical'] = 1 if value < ranges['critical_low'] or value > ranges['critical_high'] else 0\n                \n                # Calculate z-scores (normalized values)\n                normal_mean = (ranges['low'] + ranges['high']) / 2\n                normal_std = (ranges['high'] - ranges['low']) / 4  # Approximate std\n                features[f'{vital}_z_score'] = (value - normal_mean) / normal_std if normal_std > 0 else 0\n        \n        # BMI processing\n        if 'height' in vital_signs and 'weight' in vital_signs:\n            height_m = vital_signs['height'] / 100  # Convert cm to m\n            weight_kg = vital_signs['weight']\n            \n            if height_m > 0 and weight_kg > 0:\n                bmi = weight_kg / (height_m ** 2)\n                features['bmi'] = bmi\n                \n                # BMI categories\n                for category, (min_bmi, max_bmi) in self.bmi_categories.items():\n                    features[f'bmi_{category}'] = 1 if min_bmi <= bmi < max_bmi else 0\n        \n        # Blood pressure features\n        if 'systolic_bp' in vital_signs and 'diastolic_bp' in vital_signs:\n            systolic = vital_signs['systolic_bp']\n            diastolic = vital_signs['diastolic_bp']\n            \n            if systolic and diastolic:\n                features['pulse_pressure'] = systolic - diastolic\n                features['mean_arterial_pressure'] = diastolic + (systolic - diastolic) / 3\n        \n        return features\n    \n    def _process_medical_history(self, medical_history: Dict[str, Any]) -> Dict[str, Any]:\n        \"\"\"Process medical history into features\"\"\"\n        features = {}\n        \n        # Smoking status\n        smoking_status = medical_history.get('smoking_status')\n        if smoking_status:\n            features['smoking_never'] = 1 if smoking_status == 'never' else 0\n            features['smoking_current'] = 1 if smoking_status == 'current' else 0\n            features['smoking_former'] = 1 if smoking_status == 'former' else 0\n        \n        # Alcohol consumption\n        alcohol = medical_history.get('alcohol_consumption')\n        if alcohol:\n            features['alcohol_none'] = 1 if alcohol == 'none' else 0\n            features['alcohol_moderate'] = 1 if alcohol in ['occasional', 'moderate'] else 0\n            features['alcohol_heavy'] = 1 if alcohol == 'heavy' else 0\n        \n        # Exercise frequency\n        exercise = medical_history.get('exercise_frequency')\n        if exercise:\n            exercise_mapping = {'none': 0, 'rare': 1, 'weekly': 2, 'daily': 3}\n            features['exercise_frequency_score'] = exercise_mapping.get(exercise, 0)\n        \n        # Allergies\n        allergies = medical_history.get('allergies', [])\n        features['num_allergies'] = len(allergies)\n        features['has_allergies'] = 1 if len(allergies) > 0 else 0\n        \n        # Medications\n        medications = medical_history.get('current_medications', [])\n        features['num_medications'] = len(medications)\n        features['polypharmacy'] = 1 if len(medications) >= 5 else 0\n        \n        # Chronic conditions\n        conditions = medical_history.get('chronic_conditions', [])\n        features['num_chronic_conditions'] = len(conditions)\n        features['has_chronic_conditions'] = 1 if len(conditions) > 0 else 0\n        \n        # Disease category flags\n        for category, diseases in DISEASE_CATEGORIES.items():\n            category_count = sum(1 for condition in conditions \n                               if any(disease.lower() in condition.lower() for disease in diseases))\n            features[f'{category}_conditions_count'] = category_count\n            features[f'has_{category}_condition'] = 1 if category_count > 0 else 0\n        \n        # Family history\n        family_history = medical_history.get('family_history', {})\n        for condition_type, conditions_list in family_history.items():\n            features[f'family_history_{condition_type}_count'] = len(conditions_list) if conditions_list else 0\n            features[f'has_family_history_{condition_type}'] = 1 if conditions_list else 0\n        \n        return features\n    \n    def _process_symptoms(self, chief_complaint: Dict[str, Any]) -> Dict[str, Any]:\n        \"\"\"Process symptoms and complaints into features\"\"\"\n        features = {}\n        \n        # Pain scale\n        pain_scale = chief_complaint.get('pain_scale')\n        if pain_scale is not None:\n            features['pain_scale'] = pain_scale\n            features['severe_pain'] = 1 if pain_scale >= 7 else 0\n            features['moderate_pain'] = 1 if 4 <= pain_scale < 7 else 0\n            features['mild_pain'] = 1 if 1 <= pain_scale < 4 else 0\n            features['no_pain'] = 1 if pain_scale == 0 else 0\n        \n        # Symptoms processing\n        symptoms = chief_complaint.get('symptoms', [])\n        features['num_symptoms'] = len(symptoms)\n        features['has_symptoms'] = 1 if len(symptoms) > 0 else 0\n        \n        if symptoms:\n            # Average severity\n            severities = [s.get('severity', 0) for s in symptoms if s.get('severity')]\n            if severities:\n                features['avg_symptom_severity'] = np.mean(severities)\n                features['max_symptom_severity'] = max(severities)\n                features['min_symptom_severity'] = min(severities)\n            \n            # Symptom categories\n            symptom_categories = {'pain': 0, 'nausea': 0, 'fever': 0, 'fatigue': 0, \n                                'respiratory': 0, 'cardiovascular': 0, 'neurological': 0}\n            \n            for symptom in symptoms:\n                description = symptom.get('description', '').lower()\n                \n                if any(word in description for word in ['pain', 'ache', 'hurt', 'sore']):\n                    symptom_categories['pain'] += 1\n                if any(word in description for word in ['nausea', 'sick', 'queasy']):\n                    symptom_categories['nausea'] += 1\n                if any(word in description for word in ['fever', 'hot', 'temperature']):\n                    symptom_categories['fever'] += 1\n                if any(word in description for word in ['tired', 'fatigue', 'exhausted']):\n                    symptom_categories['fatigue'] += 1\n                if any(word in description for word in ['cough', 'breath', 'chest']):\n                    symptom_categories['respiratory'] += 1\n                if any(word in description for word in ['heart', 'chest pain', 'palpitation']):\n                    symptom_categories['cardiovascular'] += 1\n                if any(word in description for word in ['headache', 'dizzy', 'confusion']):\n                    symptom_categories['neurological'] += 1\n            \n            for category, count in symptom_categories.items():\n                features[f'{category}_symptoms_count'] = count\n                features[f'has_{category}_symptoms'] = 1 if count > 0 else 0\n        \n        return features\n    \n    def _process_lab_results(self, lab_results: List[Dict[str, Any]]) -> Dict[str, Any]:\n        \"\"\"Process laboratory results into features\"\"\"\n        features = {}\n        \n        features['num_lab_results'] = len(lab_results)\n        features['has_lab_results'] = 1 if len(lab_results) > 0 else 0\n        \n        abnormal_count = 0\n        \n        for lab in lab_results:\n            test_name = lab.get('test_name', '').lower().replace(' ', '_')\n            value = lab.get('value')\n            abnormal = lab.get('abnormal', False)\n            \n            if abnormal:\n                abnormal_count += 1\n            \n            # Create features for specific tests\n            if test_name in self.lab_reference_ranges and value is not None:\n                features[f'{test_name}_value'] = value\n                \n                # Normalize lab values\n                ref_range = self.lab_reference_ranges[test_name]\n                ref_mean = (ref_range['low'] + ref_range['high']) / 2\n                ref_std = (ref_range['high'] - ref_range['low']) / 4\n                \n                features[f'{test_name}_normalized'] = (value - ref_mean) / ref_std if ref_std > 0 else 0\n                features[f'{test_name}_abnormal'] = 1 if value < ref_range['low'] or value > ref_range['high'] else 0\n        \n        features['num_abnormal_labs'] = abnormal_count\n        features['abnormal_lab_ratio'] = abnormal_count / len(lab_results) if len(lab_results) > 0 else 0\n        \n        return features\n    \n    def _calculate_derived_features(self, features: Dict[str, Any]) -> Dict[str, Any]:\n        \"\"\"Calculate derived features from existing features\"\"\"\n        derived = {}\n        \n        # Cardiovascular risk factors\n        cv_risk_factors = [\n            features.get('has_cardiovascular_condition', 0),\n            features.get('smoking_current', 0),\n            features.get('bmi_obese_class_1', 0) + features.get('bmi_obese_class_2', 0) + features.get('bmi_obese_class_3', 0),\n            features.get('systolic_bp_high', 0),\n            features.get('age_group_elderly', 0)\n        ]\n        derived['cardiovascular_risk_score'] = sum(cv_risk_factors)\n        \n        # Metabolic syndrome indicators\n        metabolic_indicators = [\n            features.get('bmi_obese_class_1', 0) + features.get('bmi_obese_class_2', 0) + features.get('bmi_obese_class_3', 0),\n            features.get('systolic_bp_high', 0),\n            features.get('glucose_abnormal', 0) if 'glucose_abnormal' in features else 0,\n            features.get('hdl_cholesterol_abnormal', 0) if 'hdl_cholesterol_abnormal' in features else 0\n        ]\n        derived['metabolic_syndrome_score'] = sum(metabolic_indicators)\n        \n        # Overall health score (inverse of risk factors)\n        health_positives = [\n            features.get('smoking_never', 0),\n            features.get('alcohol_none', 0) + features.get('alcohol_moderate', 0),\n            features.get('exercise_frequency_score', 0) / 3,  # Normalize to 0-1\n            features.get('bmi_normal', 0),\n            1 - features.get('has_chronic_conditions', 0)\n        ]\n        derived['overall_health_score'] = sum(health_positives) / len(health_positives)\n        \n        return derived\n    \n    def _calculate_risk_scores(self, features: Dict[str, Any], \n                             patient_data: Dict[str, Any]) -> Dict[str, Any]:\n        \"\"\"Calculate disease-specific risk scores\"\"\"\n        risk_scores = {}\n        \n        # Diabetes risk score (simplified)\n        diabetes_risk = (\n            features.get('age', 0) / 100 * 0.2 +\n            features.get('bmi', 0) / 40 * 0.3 +\n            features.get('has_family_history_diabetes', 0) * 0.2 +\n            features.get('glucose_abnormal', 0) * 0.3\n        )\n        risk_scores['diabetes_risk'] = min(diabetes_risk, 1.0)\n        \n        # Cardiovascular risk score\n        cv_risk = (\n            features.get('age', 0) / 100 * 0.15 +\n            features.get('smoking_current', 0) * 0.25 +\n            features.get('systolic_bp_high', 0) * 0.2 +\n            features.get('cholesterol_total_abnormal', 0) * 0.2 +\n            features.get('has_cardiovascular_condition', 0) * 0.2\n        )\n        risk_scores['cardiovascular_risk'] = min(cv_risk, 1.0)\n        \n        # Respiratory risk score\n        resp_risk = (\n            features.get('smoking_current', 0) * 0.4 +\n            features.get('has_respiratory_symptoms', 0) * 0.3 +\n            features.get('has_respiratory_condition', 0) * 0.3\n        )\n        risk_scores['respiratory_risk'] = min(resp_risk, 1.0)\n        \n        return risk_scores\n    \n    def normalize_features(self, features_df: pd.DataFrame, \n                         fit: bool = False) -> pd.DataFrame:\n        \"\"\"Normalize numerical features\"\"\"\n        numerical_features = FEATURE_CONFIG['numerical_features']\n        available_numerical = [col for col in numerical_features if col in features_df.columns]\n        \n        if available_numerical:\n            if fit:\n                features_df[available_numerical] = self.numerical_scaler.fit_transform(\n                    features_df[available_numerical]\n                )\n            else:\n                features_df[available_numerical] = self.numerical_scaler.transform(\n                    features_df[available_numerical]\n                )\n        \n        return features_df\n    \n    def handle_missing_values(self, features_df: pd.DataFrame, \n                            strategy: str = 'median') -> pd.DataFrame:\n        \"\"\"Handle missing values in features\"\"\"\n        numerical_cols = features_df.select_dtypes(include=[np.number]).columns\n        categorical_cols = features_df.select_dtypes(exclude=[np.number]).columns\n        \n        # Handle numerical missing values\n        if len(numerical_cols) > 0:\n            if 'numerical' not in self.imputers:\n                self.imputers['numerical'] = SimpleImputer(strategy=strategy)\n                features_df[numerical_cols] = self.imputers['numerical'].fit_transform(\n                    features_df[numerical_cols]\n                )\n            else:\n                features_df[numerical_cols] = self.imputers['numerical'].transform(\n                    features_df[numerical_cols]\n                )\n        \n        # Handle categorical missing values\n        if len(categorical_cols) > 0:\n            if 'categorical' not in self.imputers:\n                self.imputers['categorical'] = SimpleImputer(strategy='most_frequent')\n                features_df[categorical_cols] = self.imputers['categorical'].fit_transform(\n                    features_df[categorical_cols]\n                )\n            else:\n                features_df[categorical_cols] = self.imputers['categorical'].transform(\n                    features_df[categorical_cols]\n                )\n        \n        return features_df\n    \n    def select_features(self, X: pd.DataFrame, y: pd.Series = None, \n                       k: int = 50, method: str = 'f_classif') -> pd.DataFrame:\n        \"\"\"Select top k features based on statistical tests\"\"\"\n        if y is None or len(X) == 0:\n            return X\n        \n        try:\n            if method == 'f_classif':\n                selector = SelectKBest(score_func=f_classif, k=min(k, X.shape[1]))\n            elif method == 'chi2':\n                # Ensure all values are non-negative for chi2\n                X_positive = X - X.min() + 1\n                selector = SelectKBest(score_func=chi2, k=min(k, X.shape[1]))\n                X = X_positive\n            \n            X_selected = selector.fit_transform(X, y)\n            selected_features = X.columns[selector.get_support()].tolist()\n            \n            return pd.DataFrame(X_selected, columns=selected_features, index=X.index)\n            \n        except Exception as e:\n            logger.warning(f\"Feature selection failed: {e}. Returning original features.\")\n            return X\n    \n    def create_interaction_features(self, features_df: pd.DataFrame, \n                                   max_interactions: int = 10) -> pd.DataFrame:\n        \"\"\"Create interaction features between important variables\"\"\"\n        interaction_pairs = [\n            ('age', 'bmi'),\n            ('systolic_bp', 'diastolic_bp'),\n            ('num_medications', 'num_chronic_conditions'),\n            ('smoking_current', 'age'),\n            ('exercise_frequency_score', 'bmi')\n        ]\n        \n        for feature1, feature2 in interaction_pairs[:max_interactions]:\n            if feature1 in features_df.columns and feature2 in features_df.columns:\n                interaction_name = f'{feature1}_x_{feature2}'\n                features_df[interaction_name] = features_df[feature1] * features_df[feature2]\n        \n        return features_df
